
/*********************************************************
 * AUTOGENERATED with ecuxml2cs.xsl!
 * DO NOT EDIT WITH HANDS!
 *********************************************************/
namespace hobd{

using System;

/**
  List of PIDs generated:

  - PID_A1 - PID_A1 - - - HEX
  - PID_A2 - PID_A2 - - - HEX
  - PID_A3 - PID_A3 - - - HEX
  - PID_A8 - PID_A8 - - - HEX
  - PID_A9 - PID_A9 - - - HEX
  - PID_AA - PID_AA - - - HEX
  - PID_AC - PID_AC - - - HEX
  - PID_B1 - PID_B1 - Статус - %
  - PID_B2 - PID_B2 - Положение педали газа №1 - В
  - PID_B2 - PID_B2 - Положение педали газа №2 - В
  - PID_B2 - PID_B2 - Запрос на изменения положения дроссельной заслонки - В
  - PID_B2 - PID_B2 - Положение дроссельной заслонки №2 - В
  - PID_B2 - PID_B2 - Нагрузка мотора дроссельной заслонки при открытии - В
  - PID_B2 - PID_B2 - Нагрузка мотора дроссельной заслонки при закрытии - В
  - PID_B3 - PID_B3 - Электромагнитное сцепление - -
  - PID_B3 - PID_B3 - Питание исполнительного механизма системы EFI - -
  - PID_B3 - PID_B3 - Положение педали газа не меняется - -
  - PID_B3 - PID_B3 - Положение дросельной заслонки не меняется - -
  - PID_B3 - PID_B3 - Работа двигателя с ошибками - -
  - PID_B3 - PID_B3 - Работа двигателя с ошибками (Основной CPU) - -
  - PID_B3 - PID_B3 - Обучающееся значение при полностью закрытой др/заслонкой (нач) - В
  - PID_B3 - PID_B3 - Обучающееся значение при полностью отжатой педали газа - °
  - PID_B3 - PID_B3 - Ток двигателя дросельной заслонки - А
  - PID_B3 - PID_B3 - Ток привода э/м сцепления - А
  - ATFTemp - ATF Temp - Температура жидкости АКПП - °C
  - PID_C3 - PID_C3 - - - HEX
  - PID_D1 - PID_D1 - - - HEX
  - PID_DA - PID_DA - Задание фазы распредвала - °
  - PID_DA - PID_DA - Фаза распредвала - °
  - PID_DA - PID_DA - OVC Duty Ratio - °
  - PID_E1 - PID_E1 - - - HEX
  - PID_E2 - PID_E2 - - - HEX
  - FuelPressure - PID_E3 - Давление топлива - МПа
  - InjectorPulseWidth - Inj.pulse - Injector Pulse Width - ms
  - IdleDutyCycle - Idle Cycle - Idle Air Control Duty Cycle - %
  - PID_E7 - PID_E7 - Шаг системы EGR - HEX
  - PID_E8 - PID_E8 - Датчик давления в системе гидроусилителя руля - -
  - PID_E8 - PID_E8 - Стоп-сигнал 1 - -
  - PID_E8 - PID_E8 - Датчик электрической загрузки - -
  - PID_E8 - PID_E8 - Положение АКПП "N" или "P" - -
  - PID_E8 - PID_E8 - Система климатконтроля - -
  - PID_E8 - PID_E8 - Дросельная заслонка полностю закрыта - -
  - PID_E8 - PID_E8 - Стартер - -
  - PID_E8 - PID_E8 - Отсечка топлива от управления температурой климатконтролем - -
  - PID_E8 - PID_E8 - Отсечка топлива от закрытой дроссельной заслонки - -
  - PID_E8 - PID_E8 - Сигнал сдвига от гидро/электро усилителя руля - -
  - PID_E8 - PID_E8 - Стоп-сигнал 2 - -
  - PID_E8 - PID_E8 - Сигнал остановки двигателя - -
  - PID_EC - PID_EC - - - HEX
  - PID_ED - PID_ED - Температура EGR - °C
  - PID_EF - PID_EF - VSV A/C Cut - -
  - PID_EF - PID_EF - VSV Variable Intake - -
  - PID_EF - PID_EF - VSV Fuel Pressure UP - -
  - PID_EF - PID_EF - VSV EGR System - -
  - PID_EF - PID_EF - VSV Intake Control - -
  - PID_EF - PID_EF - VSV Fuel Pump Relay - -
  - PID_EF - PID_EF - VSV Secondary Air - -
  - PID_EF - PID_EF - VSV SCV - -
  - PID_EF - PID_EF - VSV A/C Idle Up - -
  - PID_EF - PID_EF - VSV Fuel Pump / Spd - -
  - PID_EF - PID_EF - VSV Boost Pressure Control - -
  - PID_EF - PID_EF - VSV A/C Clutch Relay - -
  - PID_EF - PID_EF - VSV EVAP Purge - -
  - PID_EF - PID_EF - VSV Vapor Presure - -
  - PID_EF - PID_EF - VSV VVT2 Control Bank 2 - -
  - PID_EF - PID_EF - VSV VVT2 Intake Control - -
  - PID_EF - PID_EF - VSV Super Charger Control Relay - -
  - PID_EF - PID_EF - VSV VVT Control Bank 1 - -
  - PID_EF - PID_EF - VSV Automatic Oil Supply - -
  - PID_EF - PID_EF - VSV Air Bleed - -
  - PID_EF - PID_EF - VSV Intake Air Control - -
  - PID_EF - PID_EF - VSV Exhaust Gas Control - -
  - PID_EF - PID_EF - VSV Exaust ByPass VC - -
  - PID_EF - PID_EF - VSV Canister Pressure Control - -
  - PID_EF - PID_EF - VSV Tank Pressure ByPass - -
  - PID_EF - PID_EF - VSV VVTL Control Bank 1 - -
  - PID_EF - PID_EF - VSV VVTL Control Bank 2 - -
  - PID_EF - PID_EF - VSV AICV - -
  - PID_EF - PID_EF - VSV Engine Cooling - -
  - PID_EF - PID_EF - VSV Vent Value - -
  - PID_EF - PID_EF - VSV Pump for EVAP System - -
  - PID_F7 - PID_F7 - - - HEX
  - ShiftPosition - Передача - № передачи АКПП - -
  - PID_F9 - PID_F9 - Положение селектора АКПП - "L" - -
  - PID_F9 - PID_F9 - Положение селектора АКПП - "2" - -
  - PID_F9 - PID_F9 - Положение селектора АКПП - "R" - -
  - PID_F9 - PID_F9 - Режим АКПП - "PWR" - -
  - PID_F9 - PID_F9 - Переключатель АКПП - "OverDrive" - -
  - PID_F9 - PID_F9 - Режим АКПП - "Kick Down" - -
  - PID_F9 - PID_F9 - Стоп-сигнал - -
  - PID_F9 - PID_F9 - Блокировка 4-й скорости системой круиз-контроль - -
  - PID_F9 - PID_F9 - Положение селектора АКПП - "3" - -
  - PID_F9 - PID_F9 - Положение селектора АКПП - "D" - -
  - PID_F9 - PID_F9 - Положение селектора АКПП - "Snow" - -
  - PID_F9 - PID_F9 - Режим АКПП - "Sport" - -
  - PID_F9 - PID_F9 - Режим АКПП - "Sport Shift Down" - -
  - PID_F9 - PID_F9 - Режим АКПП - "Sport Shift Up" - -
  - PID_FB - PID_FB - Электромагнитный клапан SLN - -
  - PID_FB - PID_FB - Электромагнитный клапан SLU - -
  - PID_FB - PID_FB - Электромагнитный клапан SLT - -
  - PID_FB - PID_FB - Электромагнитный клапан SLD - -
  - PID_FB - PID_FB - Электромагнитный клапан SLC - -
  - PID_FB - PID_FB - Электромагнитный клапан SLS - -
  - PID_FB - PID_FB - Электромагнитный клапан DSU - -
*/
public class ToyotaPIDs : BasicPIDs
{

    public ToyotaPIDs()
    {
    }

    override protected void registerPIDs(PIDRegistry registry)
    {
        base.registerPIDs(registry);

        
        // PID_A1
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_A1", 0xA1)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_A2
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_A2", 0xA2)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_A3
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_A3", 0xA3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_A8
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_A8", 0xA8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_A9
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_A9", 0xA9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_AA
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_AA", 0xAA)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_AC
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_AC", 0xAC)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_B1
        // Статус
        // %
        registry.add(new SimplePID("Toyota.PID_B1", 0xB1)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_B2
        // Положение педали газа №1
        // В
        registry.add(new SimplePID("Toyota.PID_B2", 0xB2)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_B2
        // Положение педали газа №2
        // В
        registry.add(new SimplePID("Toyota.PID_B2", 0xB2)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x01); }
                        });

        // PID_B2
        // Запрос на изменения положения дроссельной заслонки
        // В
        registry.add(new SimplePID("Toyota.PID_B2", 0xB2)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x02); }
                        });

        // PID_B2
        // Положение дроссельной заслонки №2
        // В
        registry.add(new SimplePID("Toyota.PID_B2", 0xB2)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x03); }
                        });

        // PID_B2
        // Нагрузка мотора дроссельной заслонки при открытии
        // В
        registry.add(new SimplePID("Toyota.PID_B2", 0xB2)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x04); }
                        });

        // PID_B2
        // Нагрузка мотора дроссельной заслонки при закрытии
        // В
        registry.add(new SimplePID("Toyota.PID_B2", 0xB2)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x05); }
                        });

        // PID_B3
        // Электромагнитное сцепление
        // -
        registry.add(new SimplePID("Toyota.PID_B3", 0xB3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 1); }
                        });

        // PID_B3
        // Питание исполнительного механизма системы EFI
        // -
        registry.add(new SimplePID("Toyota.PID_B3", 0xB3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 2); }
                        });

        // PID_B3
        // Положение педали газа не меняется
        // -
        registry.add(new SimplePID("Toyota.PID_B3", 0xB3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 3); }
                        });

        // PID_B3
        // Положение дросельной заслонки не меняется
        // -
        registry.add(new SimplePID("Toyota.PID_B3", 0xB3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 4); }
                        });

        // PID_B3
        // Работа двигателя с ошибками
        // -
        registry.add(new SimplePID("Toyota.PID_B3", 0xB3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 5); }
                        });

        // PID_B3
        // Работа двигателя с ошибками (Основной CPU)
        // -
        registry.add(new SimplePID("Toyota.PID_B3", 0xB3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 6); }
                        });

        // PID_B3
        // Обучающееся значение при полностью закрытой др/заслонкой (нач)
        // В
        registry.add(new SimplePID("Toyota.PID_B3", 0xB3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x02); }
                        });

        // PID_B3
        // Обучающееся значение при полностью отжатой педали газа
        // °
        registry.add(new SimplePID("Toyota.PID_B3", 0xB3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x03); }
                        });

        // PID_B3
        // Ток двигателя дросельной заслонки
        // А
        registry.add(new SimplePID("Toyota.PID_B3", 0xB3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x04); }
                        });

        // PID_B3
        // Ток привода э/м сцепления
        // А
        registry.add(new SimplePID("Toyota.PID_B3", 0xB3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x05); }
                        });

        // ATF Temp
        // Температура жидкости АКПП
        // °C
        registry.add(new SimplePID("Toyota.ATFTemp", 0xB4)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x0) - 40; }
                        });

        // PID_C3
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_C3", 0xC3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_D1
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_D1", 0xD1)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_DA
        // Задание фазы распредвала
        // °
        registry.add(new SimplePID("Toyota.PID_DA", 0xDA)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00) * 2.5; }
                        });

        // PID_DA
        // Фаза распредвала
        // °
        registry.add(new SimplePID("Toyota.PID_DA", 0xDA)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x02) * 2.5; }
                        });

        // PID_DA
        // OVC Duty Ratio
        // °
        registry.add(new SimplePID("Toyota.PID_DA", 0xDA)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x04) * 2.5; }
                        });

        // PID_E1
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_E1", 0xE1)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_E2
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_E2", 0xE2)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_E3
        // Давление топлива
        // МПа
        registry.add(new SimplePID("Toyota.FuelPressure", 0xE3)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00) * 816 / 255; }
                        });

        // Inj.pulse
        // Injector Pulse Width
        // ms
        registry.add(new SimplePID("Toyota.InjectorPulseWidth", 0xE4)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return (get(0x00) * (32.60/255)); }
                        });

        // Idle Cycle
        // Idle Air Control Duty Cycle
        // %
        registry.add(new SimplePID("Toyota.IdleDutyCycle", 0xE6)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return (get(0x00) * (99.4/255)); }
                        });

        // PID_E7
        // Шаг системы EGR
        // HEX
        registry.add(new SimplePID("Toyota.PID_E7", 0xE7)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_E8
        // Датчик давления в системе гидроусилителя руля
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 1); }
                        });

        // PID_E8
        // Стоп-сигнал 1
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 2); }
                        });

        // PID_E8
        // Датчик электрической загрузки
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 3); }
                        });

        // PID_E8
        // Положение АКПП "N" или "P"
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 4); }
                        });

        // PID_E8
        // Система климатконтроля
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 5); }
                        });

        // PID_E8
        // Дросельная заслонка полностю закрыта
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 6); }
                        });

        // PID_E8
        // Стартер
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 7); }
                        });

        // PID_E8
        // Отсечка топлива от управления температурой климатконтролем
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x01, 0); }
                        });

        // PID_E8
        // Отсечка топлива от закрытой дроссельной заслонки
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x01, 1); }
                        });

        // PID_E8
        // Сигнал сдвига от гидро/электро усилителя руля
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x02, 0); }
                        });

        // PID_E8
        // Стоп-сигнал 2
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x02, 6); }
                        });

        // PID_E8
        // Сигнал остановки двигателя
        // -
        registry.add(new SimplePID("Toyota.PID_E8", 0xE8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x02, 7); }
                        });

        // PID_EC
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_EC", 0xEC)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_ED
        // Температура EGR
        // °C
        registry.add(new SimplePID("Toyota.PID_ED", 0xED)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_EF
        // VSV A/C Cut
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x01); }
                        });

        // PID_EF
        // VSV Variable Intake
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x02); }
                        });

        // PID_EF
        // VSV Fuel Pressure UP
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x03); }
                        });

        // PID_EF
        // VSV EGR System
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x04); }
                        });

        // PID_EF
        // VSV Intake Control
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x05); }
                        });

        // PID_EF
        // VSV Fuel Pump Relay
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x06); }
                        });

        // PID_EF
        // VSV Secondary Air
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x07); }
                        });

        // PID_EF
        // VSV SCV
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x08); }
                        });

        // PID_EF
        // VSV A/C Idle Up
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x11); }
                        });

        // PID_EF
        // VSV Fuel Pump / Spd
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x12); }
                        });

        // PID_EF
        // VSV Boost Pressure Control
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x13); }
                        });

        // PID_EF
        // VSV A/C Clutch Relay
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x14); }
                        });

        // PID_EF
        // VSV EVAP Purge
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x15); }
                        });

        // PID_EF
        // VSV Vapor Presure
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x16); }
                        });

        // PID_EF
        // VSV VVT2 Control Bank 2
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x17); }
                        });

        // PID_EF
        // VSV VVT2 Intake Control
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x18); }
                        });

        // PID_EF
        // VSV Super Charger Control Relay
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x21); }
                        });

        // PID_EF
        // VSV VVT Control Bank 1
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x22); }
                        });

        // PID_EF
        // VSV Automatic Oil Supply
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x24); }
                        });

        // PID_EF
        // VSV Air Bleed
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x25); }
                        });

        // PID_EF
        // VSV Intake Air Control
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x26); }
                        });

        // PID_EF
        // VSV Exhaust Gas Control
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x27); }
                        });

        // PID_EF
        // VSV Exaust ByPass VC
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x28); }
                        });

        // PID_EF
        // VSV Canister Pressure Control
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x31); }
                        });

        // PID_EF
        // VSV Tank Pressure ByPass
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x32); }
                        });

        // PID_EF
        // VSV VVTL Control Bank 1
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x33); }
                        });

        // PID_EF
        // VSV VVTL Control Bank 2
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x34); }
                        });

        // PID_EF
        // VSV AICV
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x35); }
                        });

        // PID_EF
        // VSV Engine Cooling
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x36); }
                        });

        // PID_EF
        // VSV Vent Value
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x37); }
                        });

        // PID_EF
        // VSV Pump for EVAP System
        // -
        registry.add(new SimplePID("Toyota.PID_EF", 0xEF)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x38); }
                        });

        // PID_F7
        // -
        // HEX
        registry.add(new SimplePID("Toyota.PID_F7", 0xF7)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // Передача
        // № передачи АКПП
        // -
        registry.add(new SimplePID("Toyota.ShiftPosition", 0xF8)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get(0x00); }
                        });

        // PID_F9
        // Положение селектора АКПП - "L"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 1-1); }
                        });

        // PID_F9
        // Положение селектора АКПП - "2"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 2-1); }
                        });

        // PID_F9
        // Положение селектора АКПП - "R"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 3-1); }
                        });

        // PID_F9
        // Режим АКПП - "PWR"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 4-1); }
                        });

        // PID_F9
        // Переключатель АКПП - "OverDrive"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 5-1); }
                        });

        // PID_F9
        // Режим АКПП - "Kick Down"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 6-1); }
                        });

        // PID_F9
        // Стоп-сигнал
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 7-1); }
                        });

        // PID_F9
        // Блокировка 4-й скорости системой круиз-контроль
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 8-1); }
                        });

        // PID_F9
        // Положение селектора АКПП - "3"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x01, 1-1); }
                        });

        // PID_F9
        // Положение селектора АКПП - "D"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x01, 3-1); }
                        });

        // PID_F9
        // Положение селектора АКПП - "Snow"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x01, 4-1); }
                        });

        // PID_F9
        // Режим АКПП - "Sport"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x01, 5-1); }
                        });

        // PID_F9
        // Режим АКПП - "Sport Shift Down"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x01, 6-1); }
                        });

        // PID_F9
        // Режим АКПП - "Sport Shift Up"
        // -
        registry.add(new SimplePID("Toyota.PID_F9", 0xF9)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x01, 7-1); }
                        });

        // PID_FB
        // Электромагнитный клапан SLN
        // -
        registry.add(new SimplePID("Toyota.PID_FB", 0xFB)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 1-1); }
                        });

        // PID_FB
        // Электромагнитный клапан SLU
        // -
        registry.add(new SimplePID("Toyota.PID_FB", 0xFB)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 2-1); }
                        });

        // PID_FB
        // Электромагнитный клапан SLT
        // -
        registry.add(new SimplePID("Toyota.PID_FB", 0xFB)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 3-1); }
                        });

        // PID_FB
        // Электромагнитный клапан SLD
        // -
        registry.add(new SimplePID("Toyota.PID_FB", 0xFB)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 4-1); }
                        });

        // PID_FB
        // Электромагнитный клапан SLC
        // -
        registry.add(new SimplePID("Toyota.PID_FB", 0xFB)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 5-1); }
                        });

        // PID_FB
        // Электромагнитный клапан SLS
        // -
        registry.add(new SimplePID("Toyota.PID_FB", 0xFB)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 6-1); }
                        });

        // PID_FB
        // Электромагнитный клапан DSU
        // -
        registry.add(new SimplePID("Toyota.PID_FB", 0xFB)
                        {
                            value = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit; return get_bit(0x00, 7-1); }
                        });


    }

}

}
