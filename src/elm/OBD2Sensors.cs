
/*********************************************************
 * AUTOGENERATED with ecuxml2cs.xsl!
 * DO NOT EDIT WITH HANDS!
 *********************************************************/
namespace hobd{

using System;

public class OBD2Sensors : SensorProvider
{

    public OBD2Sensors()
    {
    }
    
    public string GetName()
    {
        return "OBD2Sensors";
    }

    public string GetDescription()
    {
        return "OBD-II standard ELM Module (323/327)";
    }
    
    public string GetDescription(string lang)
    {
        return GetDescription();
    }

    public void Activate(SensorRegistry registry)
    {
        CoreSensor s;
        
        // OBD2DTCFRZF
        s = new OBD2Sensor()
            {
                ID = "OBD2.DTCFRZF",
                Name = "DTCFRZF",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0x00);
                      },
                  
                Command = 0x02,
                
            };
        
        registry.Add(s);

        // OBD2FuelSystemStatus
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelSystemStatus",
                Name = "FuelSystemStatus",
                
                      obdValue = (p) => { return p.getab()*1; },
                  
                Command = 0x03,
                
            };
        
        registry.Add(s);

        // OBD2EngineLoad
        s = new OBD2Sensor()
            {
                ID = "OBD2.EngineLoad",
                Name = "EngineLoad",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0) * 100 / 255;
                      },
                  
                Command = 0x04,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2CoolantTemp
        s = new OBD2Sensor()
            {
                ID = "OBD2.CoolantTemp",
                Name = "CoolantTemp",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0)-40;
                      },
                  
                Command = 0x05,
                
            };
        
        s.Units = "celsius";
  
        registry.Add(s);

        // OBD2STFT1
        s = new OBD2Sensor()
            {
                ID = "OBD2.STFT1",
                Name = "STFT1",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(0)-128) * 100/128;
                      },
                  
                Command = 0x06,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2LTFT1
        s = new OBD2Sensor()
            {
                ID = "OBD2.LTFT1",
                Name = "LTFT1",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(0)-128) * 100/128;
                      },
                  
                Command = 0x07,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2STFT2
        s = new OBD2Sensor()
            {
                ID = "OBD2.STFT2",
                Name = "STFT2",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(0)-128) * 100/128;
                      },
                  
                Command = 0x08,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2LTFT2
        s = new OBD2Sensor()
            {
                ID = "OBD2.LTFT2",
                Name = "LTFT2",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(0)-128) * 100/128;
                      },
                  
                Command = 0x09,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2FuelPressure
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelPressure",
                Name = "FuelPressure",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0)*3;
                      },
                  
                Command = 0x0A,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2IntakeManifoldPressure
        s = new OBD2Sensor()
            {
                ID = "OBD2.IntakeManifoldPressure",
                Name = "IntakeManifoldPressure",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0);
                      },
                  
                Command = 0x0B,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2RPM
        s = new OBD2Sensor()
            {
                ID = "OBD2.RPM",
                Name = "RPM",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(0)*256 + get(1)) / 4;
                      },
                  
                Command = 0x0C,
                
            };
        
        s.Units = "rpm";
  
        registry.Add(s);

        // OBD2Speed
        s = new OBD2Sensor()
            {
                ID = "OBD2.Speed",
                Name = "Speed",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0x00);
                      },
                  
                Command = 0x0D,
                
            };
        
        s.Units = "kph";
  
        registry.Add(s);

        // OBD2TimingAdvance
        s = new OBD2Sensor()
            {
                ID = "OBD2.TimingAdvance",
                Name = "TimingAdvance",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0x00)/2 - 64;
                      },
                  
                Command = 0x0E,
                
            };
        
        s.Units = "Â°";
  
        registry.Add(s);

        // OBD2IntakeAirTemp
        s = new OBD2Sensor()
            {
                ID = "OBD2.IntakeAirTemp",
                Name = "IntakeAirTemp",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0x00) - 40;
                      },
                  
                Command = 0x0F,
                
            };
        
        s.Units = "celsius";
  
        registry.Add(s);

        // OBD2MAF
        s = new OBD2Sensor()
            {
                ID = "OBD2.MAF",
                Name = "MAF",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return ((get(0)*256)+get(1)) / 100;
                      },
                  
                Command = 0x10,
                
            };
        
        s.Units = "gr/sec";
  
        registry.Add(s);

        // OBD2ThrottlePosition
        s = new OBD2Sensor()
            {
                ID = "OBD2.ThrottlePosition",
                Name = "ThrottlePosition",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0)*100 / 255;
                      },
                  
                Command = 0x11,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b1s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s1",
                Name = "Oxygen_b1s1",
                
                      obdValue = (p) => { return p.get(0)*0.005; },
                  
                Command = 0x14,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b1s1_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s1_stft",
                Name = "Oxygen_b1s1_stft",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(1)-128)*100/128;
                      },
                  
                Command = 0x14,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b1s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s2",
                Name = "Oxygen_b1s2",
                
                      obdValue = (p) => { return p.get(0)*0.005; },
                  
                Command = 0x15,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b1s2_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s2_stft",
                Name = "Oxygen_b1s2_stft",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(1)-128)*100/128;
                      },
                  
                Command = 0x15,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b1s3
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s3",
                Name = "Oxygen_b1s3",
                
                      obdValue = (p) => { return p.get(0)*0.005; },
                  
                Command = 0x16,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b1s3_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s3_stft",
                Name = "Oxygen_b1s3_stft",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(1)-128)*100/128;
                      },
                  
                Command = 0x16,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b1s4
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s4",
                Name = "Oxygen_b1s4",
                
                      obdValue = (p) => { return p.get(0)*0.005; },
                  
                Command = 0x17,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b1s4_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s4_stft",
                Name = "Oxygen_b1s4_stft",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(1)-128)*100/128;
                      },
                  
                Command = 0x17,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b2s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s1",
                Name = "Oxygen_b2s1",
                
                      obdValue = (p) => { return p.get(0)*0.005; },
                  
                Command = 0x18,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b2s1_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s1_stft",
                Name = "Oxygen_b2s1_stft",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(1)-128)*100/128;
                      },
                  
                Command = 0x18,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b2s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s2",
                Name = "Oxygen_b2s2",
                
                      obdValue = (p) => { return p.get(0)*0.005; },
                  
                Command = 0x19,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b2s2_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s2_stft",
                Name = "Oxygen_b2s2_stft",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(1)-128)*100/128;
                      },
                  
                Command = 0x19,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b2s3
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s3",
                Name = "Oxygen_b2s3",
                
                      obdValue = (p) => { return p.get(0)*0.005; },
                  
                Command = 0x1a,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b2s3_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s3_stft",
                Name = "Oxygen_b2s3_stft",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(1)-128)*100/128;
                      },
                  
                Command = 0x1a,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b2s4
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s4",
                Name = "Oxygen_b2s4",
                
                      obdValue = (p) => { return p.get(0)*0.005; },
                  
                Command = 0x1b,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b2s4_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s4_stft",
                Name = "Oxygen_b2s4_stft",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(1)-128)*100/128;
                      },
                  
                Command = 0x1b,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Lambda_b1s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Lambda_b1s1",
                Name = "Lambda_b1s1",
                
                      obdValue = (p) => { return p.getab()*2 / 65535; },
                  
                Command = 0x24,
                
            };
        
        s.Units = "";
  
        registry.Add(s);

        // OBD2Oxygen2_b1s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen2_b1s1",
                Name = "Oxygen2_b1s1",
                
                      obdValue = (p) => { return p.getcd()*8 / 65535; },
                  
                Command = 0x24,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Lambda_b1s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Lambda_b1s2",
                Name = "Lambda_b1s2",
                
                      obdValue = (p) => { return p.getab()*2 / 65535; },
                  
                Command = 0x25,
                
            };
        
        s.Units = "";
  
        registry.Add(s);

        // OBD2Oxygen2_b1s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen2_b1s2",
                Name = "Oxygen2_b1s2",
                
                      obdValue = (p) => { return p.getcd()*8 / 65535; },
                  
                Command = 0x25,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Lambda_b2s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Lambda_b2s1",
                Name = "Lambda_b2s1",
                
                      obdValue = (p) => { return p.getab()*2 / 65535; },
                  
                Command = 0x26,
                
            };
        
        s.Units = "";
  
        registry.Add(s);

        // OBD2Oxygen2_b2s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen2_b2s1",
                Name = "Oxygen2_b2s1",
                
                      obdValue = (p) => { return p.getcd()*8 / 65535; },
                  
                Command = 0x26,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Lambda_b2s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Lambda_b2s2",
                Name = "Lambda_b2s2",
                
                      obdValue = (p) => { return p.getab()*2 / 65535; },
                  
                Command = 0x27,
                
            };
        
        s.Units = "";
  
        registry.Add(s);

        // OBD2Oxygen2_b2s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen2_b2s2",
                Name = "Oxygen2_b2s2",
                
                      obdValue = (p) => { return p.getcd()*8 / 65535; },
                  
                Command = 0x27,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Lambda_b3s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Lambda_b3s1",
                Name = "Lambda_b3s1",
                
                      obdValue = (p) => { return p.getab()*2 / 65535; },
                  
                Command = 0x28,
                
            };
        
        s.Units = "";
  
        registry.Add(s);

        // OBD2Oxygen2_b3s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen2_b3s1",
                Name = "Oxygen2_b3s1",
                
                      obdValue = (p) => { return p.getcd()*8 / 65535; },
                  
                Command = 0x28,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Lambda_b3s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Lambda_b3s2",
                Name = "Lambda_b3s2",
                
                      obdValue = (p) => { return p.getab()*2 / 65535; },
                  
                Command = 0x29,
                
            };
        
        s.Units = "";
  
        registry.Add(s);

        // OBD2Oxygen2_b3s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen2_b3s2",
                Name = "Oxygen2_b3s2",
                
                      obdValue = (p) => { return p.getcd()*8 / 65535; },
                  
                Command = 0x29,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Lambda_b4s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Lambda_b4s1",
                Name = "Lambda_b4s1",
                
                      obdValue = (p) => { return p.getab()*2 / 65535; },
                  
                Command = 0x2a,
                
            };
        
        s.Units = "";
  
        registry.Add(s);

        // OBD2Oxygen2_b4s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen2_b4s1",
                Name = "Oxygen2_b4s1",
                
                      obdValue = (p) => { return p.getcd()*8 / 65535; },
                  
                Command = 0x2a,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Lambda_b4s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Lambda_b4s2",
                Name = "Lambda_b4s2",
                
                      obdValue = (p) => { return p.getab()*2 / 65535; },
                  
                Command = 0x2b,
                
            };
        
        s.Units = "";
  
        registry.Add(s);

        // OBD2Oxygen2_b4s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen2_b4s2",
                Name = "Oxygen2_b4s2",
                
                      obdValue = (p) => { return p.getcd()*8 / 65535; },
                  
                Command = 0x2b,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2OBDSupport
        s = new OBD2Sensor()
            {
                ID = "OBD2.OBDSupport",
                Name = "OBDSupport",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0);
                      },
                  
                Command = 0x1C,
                
            };
        
        registry.Add(s);

        // OBD2RunTime
        s = new OBD2Sensor()
            {
                ID = "OBD2.RunTime",
                Name = "RunTime",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0)*256 + get(1);
                      },
                  
                Command = 0x1F,
                
            };
        
        s.Units = "sec";
  
        registry.Add(s);

        // OBD2DistanceMIL
        s = new OBD2Sensor()
            {
                ID = "OBD2.DistanceMIL",
                Name = "DistanceMIL",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0)*256 + get(1);
                      },
                  
                Command = 0x21,
                
            };
        
        s.Units = "km";
  
        registry.Add(s);

        // OBD2FuelRailPressure_rel
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelRailPressure_rel",
                Name = "FuelRailPressure_rel",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (((get(0)*256)+get(1)) * 10) / 128;
                      },
                  
                Command = 0x22,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2FuelRailPressure_diesel
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelRailPressure_diesel",
                Name = "FuelRailPressure_diesel",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (((get(0)*256)+get(1)) * 10);
                      },
                  
                Command = 0x23,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2CommandedEGR
        s = new OBD2Sensor()
            {
                ID = "OBD2.CommandedEGR",
                Name = "CommandedEGR",
                
                      obdValue = (p) => { return p.get(0)*100/255; },
                  
                Command = 0x2C,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2EGRError
        s = new OBD2Sensor()
            {
                ID = "OBD2.EGRError",
                Name = "EGRError",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(0)-128)*100/128;
                      },
                  
                Command = 0x2D,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Commanded_EVAP
        s = new OBD2Sensor()
            {
                ID = "OBD2.Commanded_EVAP",
                Name = "Commanded_EVAP",
                
                      obdValue = (p) => { return p.get(0)*100/255; },
                  
                Command = 0x2E,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2FuelLevel
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelLevel",
                Name = "FuelLevel",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return 100*get(0)/255;
                      },
                  
                Command = 0x2F,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2DistanceMILCleared
        s = new OBD2Sensor()
            {
                ID = "OBD2.DistanceMILCleared",
                Name = "DistanceMILCleared",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0)*256 + get(1);
                      },
                  
                Command = 0x31,
                
            };
        
        s.Units = "km";
  
        registry.Add(s);

        // OBD2VaporPressure
        s = new OBD2Sensor()
            {
                ID = "OBD2.VaporPressure",
                Name = "VaporPressure",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (((get(0)*256)+get(1)) / 4);
                      },
                  
                Command = 0x32,
                
            };
        
        s.Units = "Pa";
  
        registry.Add(s);

        // OBD2BaroPressure
        s = new OBD2Sensor()
            {
                ID = "OBD2.BaroPressure",
                Name = "BaroPressure",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0);
                      },
                  
                Command = 0x33,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2ControlModuleVoltage
        s = new OBD2Sensor()
            {
                ID = "OBD2.ControlModuleVoltage",
                Name = "ControlModuleVoltage",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (((get(0)*256)+get(1)) / 1000);
                      },
                  
                Command = 0x42,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2AbsoluteLoadValue
        s = new OBD2Sensor()
            {
                ID = "OBD2.AbsoluteLoadValue",
                Name = "AbsoluteLoadValue",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (((get(0)*256)+get(1)) * 100 / 255);
                      },
                  
                Command = 0x43,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Lambda
        s = new OBD2Sensor()
            {
                ID = "OBD2.Lambda",
                Name = "Lambda",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(0)*256 + get(1)) * 2.0 / 65535;
                      },
                  
                Command = 0x44,
                
            };
        
        registry.Add(s);

        // OBD2AirTemp
        s = new OBD2Sensor()
            {
                ID = "OBD2.AirTemp",
                Name = "AirTemp",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return get(0) - 40;
                      },
                  
                Command = 0x46,
                
            };
        
        s.Units = "celsius";
  
        registry.Add(s);

        // OBD2EngineOilTemp
        s = new OBD2Sensor()
            {
                ID = "OBD2.EngineOilTemp",
                Name = "EngineOilTemp",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (get(0)-40 );
                      },
                  
                Command = 0x5C,
                
            };
        
        s.Units = "celsius";
  
        registry.Add(s);

        // OBD2FuelInjectionTiming
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelInjectionTiming",
                Name = "FuelInjectionTiming",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (((get(0)*256)+get(1) - 26880) / 128);
                      },
                  
                Command = 0x5D,
                
            };
        
        s.Units = "degree";
  
        registry.Add(s);

        // OBD2LitersPerHour
        s = new OBD2Sensor()
            {
                ID = "OBD2.LitersPerHour",
                Name = "LitersPerHour",
                
                      obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                        return (((get(0)*256)+get(1)) * 0.05);
                      },
                  
                Command = 0x5E,
                
            };
        
        s.Units = "lphour";
  
        registry.Add(s);

        // OBD2TCA_CINP
        s = new OBD2Sensor()
            {
                ID = "OBD2.TCA_CINP",
                Name = "TCA_CINP",
                
                      obdValue = (p) => { return p.get(1)*1; },
                  
                Command = 0x6F,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2TCB_CINP
        s = new OBD2Sensor()
            {
                ID = "OBD2.TCB_CINP",
                Name = "TCB_CINP",
                
                      obdValue = (p) => { return p.get(2)*1; },
                  
                Command = 0x6F,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2EP_1
        s = new OBD2Sensor()
            {
                ID = "OBD2.EP_1",
                Name = "EP_1",
                
                      obdValue = (p) => { return p.getbc()*0.01; },
                  
                Command = 0x73,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2EP_2
        s = new OBD2Sensor()
            {
                ID = "OBD2.EP_2",
                Name = "EP_2",
                
                      obdValue = (p) => { return p.getde()*0.01; },
                  
                Command = 0x73,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2TCA_RPM
        s = new OBD2Sensor()
            {
                ID = "OBD2.TCA_RPM",
                Name = "TCA_RPM",
                
                      obdValue = (p) => { return p.getbc()*1; },
                  
                Command = 0x74,
                
            };
        
        s.Units = "rpm";
  
        registry.Add(s);

        // OBD2TCB_RPM
        s = new OBD2Sensor()
            {
                ID = "OBD2.TCB_RPM",
                Name = "TCB_RPM",
                
                      obdValue = (p) => { return p.getde()*1; },
                  
                Command = 0x74,
                
            };
        
        s.Units = "rpm";
  
        registry.Add(s);

        // OBD2MIL
        s = new hobd.MILSensor()
            {
                ID = "OBD2.MIL",
                Name = "MIL",
                
            };
        
        registry.Add(s);

        // OBD2PMIL
        s = new hobd.PMILSensor()
            {
                ID = "OBD2.PMIL",
                Name = "PMIL",
                
            };
        
        registry.Add(s);

        // OBD2ClearDTC
        s = new hobd.ClearDTCSensor()
            {
                ID = "OBD2.ClearDTC",
                Name = "ClearDTC",
                
            };
        
        registry.Add(s);

    }

    
  public const string DTCFRZF = "DTCFRZF";

  public const string FuelSystemStatus = "FuelSystemStatus";

  public const string EngineLoad = "EngineLoad";

  public const string CoolantTemp = "CoolantTemp";

  public const string STFT1 = "STFT1";

  public const string LTFT1 = "LTFT1";

  public const string STFT2 = "STFT2";

  public const string LTFT2 = "LTFT2";

  public const string FuelPressure = "FuelPressure";

  public const string IntakeManifoldPressure = "IntakeManifoldPressure";

  public const string RPM = "RPM";

  public const string Speed = "Speed";

  public const string TimingAdvance = "TimingAdvance";

  public const string IntakeAirTemp = "IntakeAirTemp";

  public const string MAF = "MAF";

  public const string ThrottlePosition = "ThrottlePosition";

  public const string Oxygen_b1s1 = "Oxygen_b1s1";

  public const string Oxygen_b1s1_stft = "Oxygen_b1s1_stft";

  public const string Oxygen_b1s2 = "Oxygen_b1s2";

  public const string Oxygen_b1s2_stft = "Oxygen_b1s2_stft";

  public const string Oxygen_b1s3 = "Oxygen_b1s3";

  public const string Oxygen_b1s3_stft = "Oxygen_b1s3_stft";

  public const string Oxygen_b1s4 = "Oxygen_b1s4";

  public const string Oxygen_b1s4_stft = "Oxygen_b1s4_stft";

  public const string Oxygen_b2s1 = "Oxygen_b2s1";

  public const string Oxygen_b2s1_stft = "Oxygen_b2s1_stft";

  public const string Oxygen_b2s2 = "Oxygen_b2s2";

  public const string Oxygen_b2s2_stft = "Oxygen_b2s2_stft";

  public const string Oxygen_b2s3 = "Oxygen_b2s3";

  public const string Oxygen_b2s3_stft = "Oxygen_b2s3_stft";

  public const string Oxygen_b2s4 = "Oxygen_b2s4";

  public const string Oxygen_b2s4_stft = "Oxygen_b2s4_stft";

  public const string Lambda_b1s1 = "Lambda_b1s1";

  public const string Oxygen2_b1s1 = "Oxygen2_b1s1";

  public const string Lambda_b1s2 = "Lambda_b1s2";

  public const string Oxygen2_b1s2 = "Oxygen2_b1s2";

  public const string Lambda_b2s1 = "Lambda_b2s1";

  public const string Oxygen2_b2s1 = "Oxygen2_b2s1";

  public const string Lambda_b2s2 = "Lambda_b2s2";

  public const string Oxygen2_b2s2 = "Oxygen2_b2s2";

  public const string Lambda_b3s1 = "Lambda_b3s1";

  public const string Oxygen2_b3s1 = "Oxygen2_b3s1";

  public const string Lambda_b3s2 = "Lambda_b3s2";

  public const string Oxygen2_b3s2 = "Oxygen2_b3s2";

  public const string Lambda_b4s1 = "Lambda_b4s1";

  public const string Oxygen2_b4s1 = "Oxygen2_b4s1";

  public const string Lambda_b4s2 = "Lambda_b4s2";

  public const string Oxygen2_b4s2 = "Oxygen2_b4s2";

  public const string OBDSupport = "OBDSupport";

  public const string RunTime = "RunTime";

  public const string DistanceMIL = "DistanceMIL";

  public const string FuelRailPressure_rel = "FuelRailPressure_rel";

  public const string FuelRailPressure_diesel = "FuelRailPressure_diesel";

  public const string CommandedEGR = "CommandedEGR";

  public const string EGRError = "EGRError";

  public const string Commanded_EVAP = "Commanded_EVAP";

  public const string FuelLevel = "FuelLevel";

  public const string DistanceMILCleared = "DistanceMILCleared";

  public const string VaporPressure = "VaporPressure";

  public const string BaroPressure = "BaroPressure";

  public const string ControlModuleVoltage = "ControlModuleVoltage";

  public const string AbsoluteLoadValue = "AbsoluteLoadValue";

  public const string Lambda = "Lambda";

  public const string AirTemp = "AirTemp";

  public const string EngineOilTemp = "EngineOilTemp";

  public const string FuelInjectionTiming = "FuelInjectionTiming";

  public const string LitersPerHour = "LitersPerHour";

  public const string TCA_CINP = "TCA_CINP";

  public const string TCB_CINP = "TCB_CINP";

  public const string EP_1 = "EP_1";

  public const string EP_2 = "EP_2";

  public const string TCA_RPM = "TCA_RPM";

  public const string TCB_RPM = "TCB_RPM";

  public const string MIL = "MIL";

  public const string PMIL = "PMIL";

  public const string ClearDTC = "ClearDTC";

}

}
/**
  List of PIDs generated:

  - DTCFRZF - DTCFRZF - ÐÑÐ¸Ð±ÐºÐ° ECU - 
  - FuelSystemStatus - Fuel system status - Ð¢Ð¾Ð¿Ð»Ð¸Ð²Ð½Ð°Ñ ÑÐ¸ÑÑÐµÐ¼Ð°, ÑÑÐ°ÑÑÑ - 
  - EngineLoad - Engine Load - Calculated engine load value - %
  - CoolantTemp - CoolantTemp - Engine coolant temperature - celsius
  - STFT1 - STFT1 - Short term fuel trim - %
  - LTFT1 - LTFT1 - Long term fuel trim - %
  - STFT2 - STFT1 - Short term fuel trim 2 - %
  - LTFT2 - LTFT2 - Long term fuel trim 2 - %
  - FuelPressure - FuelPressure - Fuel Pressure - kPa
  - IntakeManifoldPressure - Intake Manifold Pressure - Intake Manifold Pressure - kPa
  - RPM - RPM - Engine rotations per minute - rpm
  - Speed - Speed - Vehicle speed - kph
  - TimingAdvance - Timing Advance - Ignition timing advance - Â°
  - IntakeAirTemp - Intake Air - Intake air temperature - celsius
  - MAF - MAF - Mass air flow - gr/sec
  - ThrottlePosition - Throttle - Throttle position - %
  - Oxygen_b1s1 - Oxygen b1s1 - Oxygen Sensor Output Voltage bank 1 sensor 1 - V
  - Oxygen_b1s1_stft - Oxygen b1s1 STFT - STFT for Oxygen bank 1 sensor 1 - %
  - Oxygen_b1s2 - Oxygen b1s2 - Oxygen Sensor Output Voltage bank 1 sensor 2 - V
  - Oxygen_b1s2_stft - Oxygen b1s2 STFT - STFT for Oxygen bank 1 sensor 2 - %
  - Oxygen_b1s3 - Oxygen b1s3 - Oxygen Sensor Output Voltage bank 1 sensor 3 - V
  - Oxygen_b1s3_stft - Oxygen b1s3 STFT - STFT for Oxygen bank 1 sensor 3 - %
  - Oxygen_b1s4 - Oxygen b1s4 - Oxygen Sensor Output Voltage bank 1 sensor 4 - V
  - Oxygen_b1s4_stft - Oxygen b1s4 STFT - STFT for Oxygen bank 1 sensor 4 - %
  - Oxygen_b2s1 - Oxygen b2s1 - Oxygen Sensor Output Voltage bank 2 sensor 1 - V
  - Oxygen_b2s1_stft - Oxygen b2s1 STFT - STFT for Oxygen bank 2 sensor 1 - %
  - Oxygen_b2s2 - Oxygen b2s2 - Oxygen Sensor Output Voltage bank 2 sensor 2 - V
  - Oxygen_b2s2_stft - Oxygen b2s2 STFT - STFT for Oxygen bank 2 sensor 2 - %
  - Oxygen_b2s3 - Oxygen b2s3 - Oxygen Sensor Output Voltage bank 2 sensor 3 - V
  - Oxygen_b2s3_stft - Oxygen b2s3 STFT - STFT for Oxygen bank 2 sensor 3 - %
  - Oxygen_b2s4 - Oxygen b2s4 - Oxygen Sensor Output Voltage bank 2 sensor 4 - V
  - Oxygen_b2s4_stft - Oxygen b2s4 STFT - STFT for Oxygen bank 2 sensor 4 - %
  - Lambda_b1s1 - Lambda b1s1 - Equivalence ratio (Lambda) bank 1 sensor 1 - 
  - Oxygen2_b1s1 - Oxygen b1s1 - Oxygen sensor voltage bank 1 sensor 1 - V
  - Lambda_b1s2 - Lambda b1s2 - Equivalence ratio (Lambda) bank 1 sensor 2 - 
  - Oxygen2_b1s2 - Oxygen b1s2 - Oxygen sensor voltage bank 1 sensor 2 - V
  - Lambda_b2s1 - Lambda b2s1 - Equivalence ratio (Lambda) bank 2 sensor 1 - 
  - Oxygen2_b2s1 - Oxygen b2s1 - Oxygen sensor voltage bank 2 sensor 1 - V
  - Lambda_b2s2 - Lambda b2s2 - Equivalence ratio (Lambda) bank 2 sensor 2 - 
  - Oxygen2_b2s2 - Oxygen b2s2 - Oxygen sensor voltage bank 2 sensor 2 - V
  - Lambda_b3s1 - Lambda b3s1 - Equivalence ratio (Lambda) bank 3 sensor 1 - 
  - Oxygen2_b3s1 - Oxygen b3s1 - Oxygen sensor voltage bank 3 sensor 1 - V
  - Lambda_b3s2 - Lambda b3s2 - Equivalence ratio (Lambda) bank 3 sensor 2 - 
  - Oxygen2_b3s2 - Oxygen b3s2 - Oxygen sensor voltage bank 3 sensor 2 - V
  - Lambda_b4s1 - Lambda b4s1 - Equivalence ratio (Lambda) bank 4 sensor 1 - 
  - Oxygen2_b4s1 - Oxygen b4s1 - Oxygen sensor voltage bank 4 sensor 1 - V
  - Lambda_b4s2 - Lambda b4s2 - Equivalence ratio (Lambda) bank 4 sensor 2 - 
  - Oxygen2_b4s2 - Oxygen b4s2 - Oxygen sensor voltage bank 4 sensor 2 - V
  - OBDSupport - OBD Support -  - 
  - RunTime - Run time - Run time since engine start - sec
  - DistanceMIL - Distance with MIL - Distance traveled with malfunction indicator lamp - km
  - FuelRailPressure_rel - FRP rel - Fuel Rail Pressure relative - kPa
  - FuelRailPressure_diesel - FRP diesel - Fuel Rail Pressure diesel - kPa
  - CommandedEGR - CommandedEGR - Commanded EGR - %
  - EGRError - EGRError - EGR Error - %
  - Commanded_EVAP - Commanded_EVAP - Commanded Evaporative Purge - %
  - FuelLevel - Fuel Level -  - %
  - DistanceMILCleared - MIL Cleared distance - Distance traveled since MIL is cleared - km
  - VaporPressure - Evaporative Pressure - Evaporative system vapor pressure - Pa
  - BaroPressure - Barometric Pressure - Barometric Pressure - kPa
  - ControlModuleVoltage - CM Voltage - VPWR - Control Module Voltage - V
  - AbsoluteLoadValue - Absolute Load Value -  - %
  - Lambda - Lambda -  - 
  - AirTemp - Air Temp - Outside air temperature - celsius
  - EngineOilTemp - Engine Oil Temperature -  - celsius
  - FuelInjectionTiming - Fuel Injection Timing -  - degree
  - LitersPerHour - Fuel Flow Rate -  - lphour
  - TCA_CINP - TC Pressure A - Turbocharger Compressor Inlet Pressure A - kPa
  - TCB_CINP - TC Pressure B - Turbocharger Compressor Inlet Pressure B - kPa
  - EP_1 - Exhaust Pressure B1 -  - kPa
  - EP_2 - Exhaust Pressure B2 -  - kPa
  - TCA_RPM - TC RPM A - Turbocharger RPM A - rpm
  - TCB_RPM - TC RPM B - Turbocharger RPM B - rpm
  - MIL - MIL - List of DTC codes - 
  - PMIL - PMIL - List of Pending DTC codes - 
  - ClearDTC - ClearDTC - Clear DTC request - 
*/
