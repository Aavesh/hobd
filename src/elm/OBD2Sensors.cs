
/*********************************************************
 * AUTOGENERATED with ecuxml2cs.xsl!
 * DO NOT EDIT WITH HANDS!
 *********************************************************/
namespace hobd{

using System;

public class OBD2Sensors : SensorProvider
{

    public OBD2Sensors()
    {
    }
    
    public string GetName()
    {
        return "OBD2Sensors";
    }

    public string GetDescription()
    {
        return "OBD-II standard ELM Module (323/327)";
    }
    
    public string GetDescription(string lang)
    {
        return GetDescription();
    }

    public void Activate(SensorRegistry registry)
    {
        CoreSensor s;
        
        // OBD2PID_02
        s = new OBD2Sensor()
            {
                ID = "OBD2.PID_02",
                Name = "PID_02",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0x00);
                                  },
                Command = 0x02,
                
            };
        
        registry.Add(s);

        // OBD2FuelSystemStatus
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelSystemStatus",
                Name = "FuelSystemStatus",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0);
                                  },
                Command = 0x03,
                
            };
        
        registry.Add(s);

        // OBD2EngineLoad
        s = new OBD2Sensor()
            {
                ID = "OBD2.EngineLoad",
                Name = "EngineLoad",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0) * 100 / 255;
                                  },
                Command = 0x04,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2CoolantTemp
        s = new OBD2Sensor()
            {
                ID = "OBD2.CoolantTemp",
                Name = "CoolantTemp",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)-40;
                                  },
                Command = 0x05,
                
            };
        
        s.Units = "celsius";
  
        registry.Add(s);

        // OBD2STFT1
        s = new OBD2Sensor()
            {
                ID = "OBD2.STFT1",
                Name = "STFT1",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(0)-128) * 100/128;
                                  },
                Command = 0x06,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2LTFT1
        s = new OBD2Sensor()
            {
                ID = "OBD2.LTFT1",
                Name = "LTFT1",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(0)-128) * 100/128;
                                  },
                Command = 0x07,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2STFT2
        s = new OBD2Sensor()
            {
                ID = "OBD2.STFT2",
                Name = "STFT2",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(0)-128) * 100/128;
                                  },
                Command = 0x08,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2LTFT2
        s = new OBD2Sensor()
            {
                ID = "OBD2.LTFT2",
                Name = "LTFT2",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(0)-128) * 100/128;
                                  },
                Command = 0x09,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2FuelPressure
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelPressure",
                Name = "FuelPressure",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*3;
                                  },
                Command = 0x0A,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2IntakeManifoldPressure
        s = new OBD2Sensor()
            {
                ID = "OBD2.IntakeManifoldPressure",
                Name = "IntakeManifoldPressure",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0);
                                  },
                Command = 0x0B,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2RPM
        s = new OBD2Sensor()
            {
                ID = "OBD2.RPM",
                Name = "RPM",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(0)*256 + get(1)) / 4;
                                  },
                Command = 0x0C,
                
            };
        
        s.Units = "rpm";
  
        registry.Add(s);

        // OBD2Speed
        s = new hobd.SpeedSensor()
            {
                ID = "OBD2.Speed",
                Name = "Speed",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0x00);
                                  },
                Command = 0x0D,
                
            };
        
        s.Units = "kph";
  
        registry.Add(s);

        // OBD2TimingAdvance
        s = new OBD2Sensor()
            {
                ID = "OBD2.TimingAdvance",
                Name = "TimingAdvance",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0x00)/2 - 64;
                                  },
                Command = 0x0E,
                
            };
        
        s.Units = "Â°";
  
        registry.Add(s);

        // OBD2IntakeAirTemp
        s = new OBD2Sensor()
            {
                ID = "OBD2.IntakeAirTemp",
                Name = "IntakeAirTemp",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0x00) - 40;
                                  },
                Command = 0x0F,
                
            };
        
        s.Units = "celsius";
  
        registry.Add(s);

        // OBD2MAF
        s = new OBD2Sensor()
            {
                ID = "OBD2.MAF",
                Name = "MAF",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return ((get(0)*256)+get(1)) / 100;
                                  },
                Command = 0x10,
                
            };
        
        s.Units = "gr/sec";
  
        registry.Add(s);

        // OBD2ThrottlePosition
        s = new OBD2Sensor()
            {
                ID = "OBD2.ThrottlePosition",
                Name = "ThrottlePosition",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*100 / 255;
                                  },
                Command = 0x11,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b1s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s1",
                Name = "Oxygen_b1s1",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*0.005;
                                  },
                Command = 0x14,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b1s1_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s1_stft",
                Name = "Oxygen_b1s1_stft",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(1)-128)*100/128;
                                  },
                Command = 0x14,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b1s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s2",
                Name = "Oxygen_b1s2",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*0.005;
                                  },
                Command = 0x15,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b1s2_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s2_stft",
                Name = "Oxygen_b1s2_stft",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(1)-128)*100/128;
                                  },
                Command = 0x15,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b1s3
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s3",
                Name = "Oxygen_b1s3",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*0.005;
                                  },
                Command = 0x16,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b1s3_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s3_stft",
                Name = "Oxygen_b1s3_stft",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(1)-128)*100/128;
                                  },
                Command = 0x16,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b1s4
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s4",
                Name = "Oxygen_b1s4",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*0.005;
                                  },
                Command = 0x17,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b1s4_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b1s4_stft",
                Name = "Oxygen_b1s4_stft",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(1)-128)*100/128;
                                  },
                Command = 0x17,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b2s1
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s1",
                Name = "Oxygen_b2s1",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*0.005;
                                  },
                Command = 0x18,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b2s1_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s1_stft",
                Name = "Oxygen_b2s1_stft",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(1)-128)*100/128;
                                  },
                Command = 0x18,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b2s2
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s2",
                Name = "Oxygen_b2s2",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*0.005;
                                  },
                Command = 0x19,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b2s2_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s2_stft",
                Name = "Oxygen_b2s2_stft",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(1)-128)*100/128;
                                  },
                Command = 0x19,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b2s3
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s3",
                Name = "Oxygen_b2s3",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*0.005;
                                  },
                Command = 0x1A,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b2s3_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s3_stft",
                Name = "Oxygen_b2s3_stft",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(1)-128)*100/128;
                                  },
                Command = 0x1A,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2Oxygen_b2s4
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s4",
                Name = "Oxygen_b2s4",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*0.005;
                                  },
                Command = 0x1B,
                
            };
        
        s.Units = "V";
  
        registry.Add(s);

        // OBD2Oxygen_b2s4_stft
        s = new OBD2Sensor()
            {
                ID = "OBD2.Oxygen_b2s4_stft",
                Name = "Oxygen_b2s4_stft",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (get(1)-128)*100/128;
                                  },
                Command = 0x1B,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2RunTime
        s = new OBD2Sensor()
            {
                ID = "OBD2.RunTime",
                Name = "RunTime",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0)*256 + get(1);
                                  },
                Command = 0x1F,
                
            };
        
        s.Units = "sec";
  
        registry.Add(s);

        // OBD2FuelRailPressure_rel
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelRailPressure_rel",
                Name = "FuelRailPressure_rel",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (((get(0)*256)+get(1)) * 10) / 128;
                                  },
                Command = 0x22,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2FuelRailPressure_diesel
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelRailPressure_diesel",
                Name = "FuelRailPressure_diesel",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return (((get(0)*256)+get(1)) * 10);
                                  },
                Command = 0x23,
                
            };
        
        s.Units = "kPa";
  
        registry.Add(s);

        // OBD2FuelLevel
        s = new OBD2Sensor()
            {
                ID = "OBD2.FuelLevel",
                Name = "FuelLevel",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return 100*get(0)/255;
                                  },
                Command = 0x2F,
                
            };
        
        s.Units = "%";
  
        registry.Add(s);

        // OBD2AirTemp
        s = new OBD2Sensor()
            {
                ID = "OBD2.AirTemp",
                Name = "AirTemp",
                
                obdValue = (p) => { Func<int, double> get = p.get; Func<int, int, double> get_bit = p.get_bit;
                                    return get(0) - 40;
                                  },
                Command = 0x46,
                
            };
        
        s.Units = "celsius";
  
        registry.Add(s);

        // OBD2MIL
        s = new hobd.MILSensor()
            {
                ID = "OBD2.MIL",
                Name = "MIL",
                
            };
        
        registry.Add(s);

        // OBD2PMIL
        s = new hobd.PMILSensor()
            {
                ID = "OBD2.PMIL",
                Name = "PMIL",
                
            };
        
        registry.Add(s);

        // OBD2ClearDTC
        s = new hobd.ClearDTCSensor()
            {
                ID = "OBD2.ClearDTC",
                Name = "ClearDTC",
                
            };
        
        registry.Add(s);

    }

    
  public const string PID_02 = "PID_02";

  public const string FuelSystemStatus = "FuelSystemStatus";

  public const string EngineLoad = "EngineLoad";

  public const string CoolantTemp = "CoolantTemp";

  public const string STFT1 = "STFT1";

  public const string LTFT1 = "LTFT1";

  public const string STFT2 = "STFT2";

  public const string LTFT2 = "LTFT2";

  public const string FuelPressure = "FuelPressure";

  public const string IntakeManifoldPressure = "IntakeManifoldPressure";

  public const string RPM = "RPM";

  public const string Speed = "Speed";

  public const string TimingAdvance = "TimingAdvance";

  public const string IntakeAirTemp = "IntakeAirTemp";

  public const string MAF = "MAF";

  public const string ThrottlePosition = "ThrottlePosition";

  public const string Oxygen_b1s1 = "Oxygen_b1s1";

  public const string Oxygen_b1s1_stft = "Oxygen_b1s1_stft";

  public const string Oxygen_b1s2 = "Oxygen_b1s2";

  public const string Oxygen_b1s2_stft = "Oxygen_b1s2_stft";

  public const string Oxygen_b1s3 = "Oxygen_b1s3";

  public const string Oxygen_b1s3_stft = "Oxygen_b1s3_stft";

  public const string Oxygen_b1s4 = "Oxygen_b1s4";

  public const string Oxygen_b1s4_stft = "Oxygen_b1s4_stft";

  public const string Oxygen_b2s1 = "Oxygen_b2s1";

  public const string Oxygen_b2s1_stft = "Oxygen_b2s1_stft";

  public const string Oxygen_b2s2 = "Oxygen_b2s2";

  public const string Oxygen_b2s2_stft = "Oxygen_b2s2_stft";

  public const string Oxygen_b2s3 = "Oxygen_b2s3";

  public const string Oxygen_b2s3_stft = "Oxygen_b2s3_stft";

  public const string Oxygen_b2s4 = "Oxygen_b2s4";

  public const string Oxygen_b2s4_stft = "Oxygen_b2s4_stft";

  public const string RunTime = "RunTime";

  public const string FuelRailPressure_rel = "FuelRailPressure_rel";

  public const string FuelRailPressure_diesel = "FuelRailPressure_diesel";

  public const string FuelLevel = "FuelLevel";

  public const string AirTemp = "AirTemp";

  public const string MIL = "MIL";

  public const string PMIL = "PMIL";

  public const string ClearDTC = "ClearDTC";

}

}
/**
  List of PIDs generated:

  - PID_02 - PID_02 - ÐÑÐ¸Ð±ÐºÐ° ECU - 
  - FuelSystemStatus - Fuel system status - Ð¢Ð¾Ð¿Ð»Ð¸Ð²Ð½Ð°Ñ ÑÐ¸ÑÑÐµÐ¼Ð°, ÑÑÐ°ÑÑÑ - 
  - EngineLoad - Engine Load - Calculated engine load value - %
  - CoolantTemp - CoolantTemp - Engine coolant temperature - celsius
  - STFT1 - STFT1 - Short term fuel trim - %
  - LTFT1 - LTFT1 - Long term fuel trim - %
  - STFT2 - STFT1 - Short term fuel trim 2 - %
  - LTFT2 - LTFT2 - Long term fuel trim 2 - %
  - FuelPressure - FuelPressure - Fuel Pressure - kPa
  - IntakeManifoldPressure - Intake Manifold Pressure - Intake Manifold Pressure - kPa
  - RPM - RPM - Engine rotations per minute - rpm
  - Speed - Speed - Vehicle speed - kph
  - TimingAdvance - Timing Advance - Ignition timing advance - Â°
  - IntakeAirTemp - Intake Air - Intake air temperature - celsius
  - MAF - MAF - Mass air flow - gr/sec
  - ThrottlePosition - Throttle - Throttle position - %
  - Oxygen_b1s1 - Oxygen bank1 sensor1 - Oxygen sensor voltage - V
  - Oxygen_b1s1_stft - Oxygen bank1 sensor1 STFT - Oxygen sensor STFT - %
  - Oxygen_b1s2 - Oxygen bank1 sensor2 - Oxygen sensor voltage - V
  - Oxygen_b1s2_stft - Oxygen bank1 sensor2 STFT - Oxygen sensor STFT - %
  - Oxygen_b1s3 - Oxygen bank1 sensor3 - Oxygen sensor voltage - V
  - Oxygen_b1s3_stft - Oxygen bank1 sensor3 STFT - Oxygen sensor STFT - %
  - Oxygen_b1s4 - Oxygen bank1 sensor4 - Oxygen sensor voltage - V
  - Oxygen_b1s4_stft - Oxygen bank1 sensor4 STFT - Oxygen sensor STFT - %
  - Oxygen_b2s1 - Oxygen bank2 sensor1 - Oxygen sensor voltage - V
  - Oxygen_b2s1_stft - Oxygen bank2 sensor1 STFT - Oxygen sensor STFT - %
  - Oxygen_b2s2 - Oxygen bank2 sensor2 - Oxygen sensor voltage - V
  - Oxygen_b2s2_stft - Oxygen bank2 sensor2 STFT - Oxygen sensor STFT - %
  - Oxygen_b2s3 - Oxygen bank2 sensor3 - Oxygen sensor voltage - V
  - Oxygen_b2s3_stft - Oxygen bank2 sensor3 STFT - Oxygen sensor STFT - %
  - Oxygen_b2s4 - Oxygen bank2 sensor4 - Oxygen sensor voltage - V
  - Oxygen_b2s4_stft - Oxygen bank2 sensor4 STFT - Oxygen sensor STFT - %
  - RunTime - Run time - Run time since engine start - sec
  - FuelRailPressure_rel - Fuel Rail Pressure relative -  - kPa
  - FuelRailPressure_diesel - Fuel Rail Pressure diesel -  - kPa
  - FuelLevel - Fuel Level -  - %
  - AirTemp - Air Temp - Outside air temperature - celsius
  - MIL - MIL - List of DTC codes - 
  - PMIL - PMIL - List of Pending DTC codes - 
  - ClearDTC - ClearDTC - Clear DTC request - 
*/
