<?xml version="1.0"?>
<xsl:stylesheet
     version="1.0"
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:output indent="yes" method="text" encoding="utf-8"/>

<xsl:param name='ns' select='/parameters/@namespace'/>
<xsl:param name='class' select='concat($ns, "Sensors")'/>
<xsl:param name='skiplang' select='true'/>

<xsl:template match="/">
/*********************************************************
 * AUTOGENERATED with ecuxml2cs.xsl!
 * DO NOT EDIT WITH HANDS!
 *********************************************************/
namespace hobd{

using System;

public class <xsl:value-of select='$class'/> : SensorProvider
{

    public <xsl:value-of select='$class'/>()
    {
    }
    
    public string GetName()
    {
        return "<xsl:value-of select='$class'/>";
    }

    public string GetDescription()
    {
        return "<xsl:value-of select='/parameters/@description'/>";
    }
    
    public string GetDescription(string lang)
    {
        return GetDescription();
    }

    public void Activate(SensorRegistry registry)
    {
        CoreSensor s;
        <xsl:apply-templates select='/parameters/parameter'/>
    }

    <xsl:apply-templates select='/parameters/parameter' mode='const'/>
}

}
/**
  List of PIDs generated:
<xsl:apply-templates select='/parameters/parameter' mode='list'/>
*/
</xsl:template>

<xsl:template match='parameter'>
        <xsl:variable name='cname'>
          <xsl:if test='address and not(class)'>OBD2Sensor</xsl:if>
          <xsl:if test='class'><xsl:value-of select='class'/></xsl:if>
        </xsl:variable>
        // <xsl:value-of select='$ns'/><xsl:value-of select='@id'/>
        s = new <xsl:value-of select='$cname'/>()
            {
                ID = "<xsl:value-of select='$ns'/>.<xsl:value-of select='@id'/>",
                Name = "<xsl:value-of select='@id'/>",
                <xsl:if test='address'>
                obdValue = (p) => { Func&lt;int, double&gt; get = p.get; Func&lt;int, int, double&gt; get_bit = p.get_bit;
                                    return <xsl:value-of select='normalize-space(value)'/>;
                                  },
                Command = <xsl:value-of select='address/byte'/>,
                </xsl:if>
                <xsl:apply-templates select='property'/>
            };
        <xsl:apply-templates select='description'/>
        registry.Add(s);
</xsl:template>

<xsl:template match='property'>
                <xsl:value-of select='@name'/> = <xsl:value-of select='text()'/>,
</xsl:template>

<xsl:template match='parameter/description'>
  <xsl:if test='unit and (@lang = "en" or not(@lang))'>
        s.Units = "<xsl:value-of select='unit'/>";
  </xsl:if>
</xsl:template>

<xsl:template match='parameter' mode='const'>
  <xsl:variable name='cid' select='@id'/>
  public const string <xsl:choose>
     <xsl:when test='count(../parameter[@id = $cid]) > 1'>
       <xsl:value-of select='@id'/>_<xsl:value-of select='count(preceding-sibling::parameter[@id = $cid])'/>
     </xsl:when>
     <xsl:otherwise>
       <xsl:value-of select='@id'/>
     </xsl:otherwise>
  </xsl:choose> = "<xsl:value-of select='@id'/>";
</xsl:template>

<xsl:template match='parameter' mode='list'>
  - <xsl:value-of select='@id'/> - <xsl:value-of select='description/name'/> - <xsl:value-of select='description/description'/> - <xsl:value-of select='description/unit'/>
</xsl:template>

</xsl:stylesheet>
