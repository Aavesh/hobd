<?xml version="1.0"?>
<xsl:stylesheet
     version="1.0"
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:output indent="yes" method="text" encoding="utf-8"/>

<xsl:param name='ns' select='/parameters/@namespace'/>
<xsl:param name='class' select='concat($ns, "Sensors")'/>

<xsl:template match="/">
/*********************************************************
 * AUTOGENERATED with ecuxml2cs.xsl!
 * DO NOT EDIT WITH HANDS!
 *********************************************************/
namespace hobd{

using System;

/**
  List of PIDs generated:
<xsl:apply-templates select='/parameters/parameter' mode='list'/>
*/
public class <xsl:value-of select='$class'/> : BasicSensors
{

    public <xsl:value-of select='$class'/>()
    {
    }

    override protected void registerSensors(SensorRegistry registry)
    {
        base.registerSensors(registry);

        <xsl:apply-templates select='/parameters/parameter'/>

    }

}

}
</xsl:template>

<xsl:template match='parameter'>
        // <xsl:value-of select='description/name'/>
        // <xsl:value-of select='description/description'/>
        // <xsl:value-of select='description/unit'/>
        registry.add(new SimpleSensor("<xsl:value-of select='$ns'/>.<xsl:value-of select='@id'/>", <xsl:value-of select='address/byte'/>)
                        {
                            value = (p) => { Func&lt;int, double&gt; get = p.get; Func&lt;int, int, double&gt; get_bit = p.get_bit; return <xsl:value-of select='normalize-space(value)'/>; }
                        });
</xsl:template>

<xsl:template match='parameter' mode='list'>
  - <xsl:value-of select='@id'/> - <xsl:value-of select='description/name'/> - <xsl:value-of select='description/description'/> - <xsl:value-of select='description/unit'/>
</xsl:template>

</xsl:stylesheet>
